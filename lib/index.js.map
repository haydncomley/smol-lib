{
  "version": 3,
  "sources": ["../src/lib/helpers.lib.ts", "../src/lib/core.lib.ts", "../package.json", "../src/index.ts"],
  "sourcesContent": ["import { ComponentVariable } from \"./types.lib.js\";\n\nexport const isVar = (value: unknown) => {\n    return (typeof value === 'object' ? (value?.hasOwnProperty('get') && value?.hasOwnProperty('set')) : false) as boolean;\n}\n\nexport const isBlock = (value: unknown) => {\n    return (typeof value === 'object' ? (value?.hasOwnProperty('items')) : false) as boolean;\n}\n\nexport const getVar = <T>(val: ReturnType<ComponentVariable<unknown>['get']>, ...args: any[]): T => {\n    return (typeof val === 'function' ? getVar(val(...args)) : val) as T;\n}\n\nexport const getVarOrPrimitive = (value: unknown) => {\n    if (isVar(value)) {\n        return getVar((value as { get: () => unknown }).get());\n    };\n    if (isBlock(value)) return (value as { items: HTMLElement[] }).items[0]?.tagName;\n    return value ?? '';\n}\n\nexport const getAttributeBindings = (attr: string) => {\n    const regex = /.+ (.+)=\"/gm;\n    let m;\n    const classes: string[] = [];\n    \n    while ((m = regex.exec(attr)) !== null) {\n        if (m.index === regex.lastIndex) {\n            regex.lastIndex++;\n        }\n        \n        m.forEach((match, groupIndex) => {\n            if (groupIndex === 1) classes.push(match);\n        });\n    }\n\n    return classes[classes.length - 1];\n}", "import { isVar, isBlock, getVarOrPrimitive, getVar, getAttributeBindings } from \"./helpers.lib.js\";\nimport { ComponentBlock, ComponentOptions, ComponentRenderOptions, ComponentSettings, ComponentVariable } from \"./types.lib.js\";\n\nlet globalStore: { [key: string]: {\n    value: any,\n    bindings: ((value: any) => void)[]\n} } = {};\n\nconst createCommentMarker = (id: string | number, item: any, context: string) => {\n    if (context.endsWith('=\"')) return `<!--A::-->`;\n\n    const type = isVar(item) ? 'V' : isBlock(item) ? 'B' : 'P';\n    const value = getVarOrPrimitive(item);\n    const tempName =  `${type}::${type === 'V' ? item.id : id}`;\n    return type === 'P' ? value : `<!--${tempName}-->`;\n}\n\nconst getAllCommentMarkers = (root: HTMLElement | ChildNode) => {\n    const treeWalker = document.createTreeWalker(\n        root,\n        NodeFilter.SHOW_COMMENT,\n        {\n            \"acceptNode\": function acceptNode (node) {\n                return NodeFilter.FILTER_ACCEPT;\n            }\n        }\n    );\n\n    let currentNode = treeWalker.nextNode();\n    const nodeList = [];\n    while (currentNode) {\n        nodeList.push(currentNode);\n        currentNode = treeWalker.nextNode();\n    }\n\n    return nodeList;\n}\n\nexport const createHTML = (store: unknown[], bindings: ((newValue: any) => void)[][], component: TemplateStringsArray, ...args: unknown[]) => {\n    const argsLength = component.raw.length - 1;\n    const attributeBindingsKeys: string[] = [];\n    const attributeBindings: ComponentBlock[] = [];\n\n    const transformed = component.raw.reduce((prev, curr, i) => {\n        if (curr.endsWith('=\"')) {\n            attributeBindings.push(args[i] as ComponentBlock);\n            attributeBindingsKeys.push(getAttributeBindings(curr));\n        }\n\n        return prev + curr + ((i < argsLength) ? createCommentMarker(i, args[i], curr) : '');\n    }, '');\n\n    const wrapped = document.createElement('div');\n    wrapped.innerHTML = transformed.trim();\n\n    let totalItems: (Node | null)[] = [];\n    let itemID = 0;\n\n    const checkForBindings = (items: (Node | null)[]) => {\n        totalItems = [...totalItems, ...items];\n        const totalParentId = itemID;\n        const regex = /([V|B])::(.*)/g;\n        for (let i = itemID; i < items.length; i++) {\n            const item = totalItems[i];\n            itemID++;\n            const val = item?.textContent?.trim() ?? '';\n            if(val.match(regex)) {\n                const split = item?.textContent?.trim().split('::') ?? [];\n                if (split[0] === 'V') {\n                    const getVal = () => {\n                        const val = store[parseInt(split[1])];\n                        return typeof val === 'function' ? val() : val\n                    };\n\n                    const text = document.createTextNode(getVal());\n                    (totalItems[i] as HTMLElement)?.replaceWith(text);\n                    totalItems[i] = text;\n\n                    bindings[parseInt(split[1])].push(() => {\n                        totalItems[i]!.textContent = getVal();\n                    });\n                } else if (split[0] === 'B') {\n                    const block = args.filter((i) => typeof i !== 'number' && !['class', 'bind', 'echo'].includes((i as any).evalType))[i - 1] as ComponentBlock;\n                    if (block?.evalType === 'if') {\n                        const doEval = () => {\n                            const val = getVar(block.eval?.get());\n                            if (val) {\n                                const element = block.evalRender!(true, 1).items[totalParentId]!;\n                                (totalItems[i] as HTMLElement)?.replaceWith(element);\n                                totalItems[i] = element;\n                            } else {\n                                const text = document.createComment(`B::${split[1]}`);\n                                (totalItems[i] as HTMLElement)?.replaceWith(text);\n                                totalItems[i] = text;\n                            }\n                        }\n\n                        bindings[block.eval!.id].push(() => doEval());\n                        doEval();\n                    }\n\n                    if (block?.evalType === 'for') {\n                        const doEval = () => {\n                            const baseItem = totalItems[i] as any;\n                            if (!baseItem.arrayItems) baseItem.arrayItems = [];\n                            const itemsArray = baseItem.arrayItems;\n\n                            const val = getVar(block.eval?.get());\n                            const newItems = typeof val === 'number' ? Array.from({ length: val }, (_, i) => i) : val as unknown[];\n\n                            if (!(totalItems[i] as any).arrayItems) (totalItems[i] as any).arrayItems = [];\n\n                            if (itemsArray.length > newItems.length) {\n                                for (let i = itemsArray.length; i > newItems.length; i--) {\n                                    itemsArray.pop().remove();\n                                }\n                            } else if (itemsArray.length < newItems.length) {\n                                for (let i = itemsArray.length; i < newItems.length; i++) {\n                                    const element = block.evalRender!(newItems[i], i).items[totalParentId]!;\n                                    (itemsArray[itemsArray.length - 1] || baseItem).after(element);\n                                    itemsArray.push(element);\n                                }\n                            }\n                        }\n                    bindings[block.eval!.id].push(() => doEval());\n                        doEval();\n                    }\n                }\n            }\n        }\n    }\n\n    checkForBindings([\n        wrapped.firstChild,\n        ...getAllCommentMarkers(wrapped.firstChild!)\n    ]);\n\n    let attrBindCount = 0;\n    attributeBindingsKeys.forEach(attr => {\n        const elements = (totalItems[0] as HTMLElement).parentElement!.querySelectorAll(`*[${attr}=\"<!--A::-->\"]`);\n        elements.forEach((element) => {\n            Array.from(element.attributes).forEach((attr) => {\n                if(attr.value === '<!--A::-->') {\n                    const index = attrBindCount++;\n                    const currentBinding = attributeBindings[index];\n\n                    if (currentBinding.evalType === 'class') {\n                        const doEval = () => {\n                            element.setAttribute(attr.name, currentBinding.eval?.get());\n                        }\n    \n                        doEval();\n                        currentBinding.items.forEach((item) => {\n                            if (!bindings[(item as unknown as ComponentVariable<boolean>).id]) bindings[(item as unknown as ComponentVariable<boolean>).id] = [];\n                            bindings[(item as unknown as ComponentVariable<boolean>).id].push(() => doEval());\n                        })\n                    } else if (currentBinding.evalType === 'echo') {\n                        const name = attr.name;\n                        const doEval = () => {\n                            const value = typeof currentBinding?.eval === 'object' ? currentBinding?.eval?.get() : currentBinding?.eval;\n                            if (typeof value === 'boolean') {\n                                element.hasAttribute(name) ? element.removeAttribute(name) : element.setAttribute(name, '')\n                            } else {\n                                element.setAttribute(name, value);\n                            }\n                        }\n    \n                        doEval();\n                        if (typeof currentBinding?.eval === 'object') {\n                            bindings[currentBinding.eval!.id].push(() => doEval());\n                        }\n                    } else if (currentBinding.evalType === 'bind') {\n                        const name = attr.name;\n                        element.removeAttribute(attr.name);\n\n                        const doEval = () => {\n                            const targetElement = element as any;\n                            requestAnimationFrame(() => {\n                                if (targetElement.setBinding) {\n                                    const bindingValue = currentBinding.eval?.get();\n                                    targetElement.setBinding(name, bindingValue);\n                                }\n                            });\n                        }\n    \n                        doEval();\n                        bindings[currentBinding.eval!.id].push(() => doEval());\n                        requestAnimationFrame(() => {\n                            (element as any).getBinding(name, (val: unknown) => {\n                                store[currentBinding.eval!.id] = val;\n                                bindings[currentBinding.eval!.id].forEach((r) => r(val));\n                            });\n                        })\n                    }\n                }\n            })\n        })\n    });\n\n    return {\n        items: totalItems\n    } as ComponentBlock;\n}\n\nexport const createComponent = (tag: string, func: (options: {\n    $: ComponentOptions\n}) => ((renderOptions: ComponentRenderOptions) => ComponentBlock), settings?: ComponentSettings | string) => {\n    if (customElements.get(tag)) {\n        console.error(`Component with tag \"${tag}\" has already been defined.`);\n        return;\n    }\n\n    customElements.define(tag, class extends HTMLElement {\n        componentArgStore: { [key: string]: ComponentVariable<any>; };\n        componentStoreBindings: (() => void)[][];\n        constructor() {\n            super();\n            const root = this.attachShadow({ mode: 'closed' });\n            \n            if (typeof settings === 'string' || settings?.styles !== undefined) {\n                const styles = document.createElement('style');\n                styles.innerText = typeof settings === 'string' ? settings : settings.styles!;\n                root.appendChild(styles);\n            }\n            const { componentArgStore, componentStoreBindings } = createComponentLogic(root, func);\n            this.componentArgStore = componentArgStore;\n            this.componentStoreBindings = componentStoreBindings;\n        }\n\n        setBinding = (key: string, val: any) => {\n            if (!this.componentArgStore[key]) return;\n            this.componentArgStore[key].set(() => val);\n        };\n\n        getBinding = (key: string, callback: (value: any) => void) => {\n            if (this.componentArgStore[key]) {\n                this.componentStoreBindings[this.componentArgStore[key].id].push(() => {\n                    callback(this.componentArgStore[key].get());\n                });\n            }\n        };\n    });\n};\n\nexport const createComponentLogic = (root: ShadowRoot, func: (options: {\n    $: ComponentOptions\n}) => ((renderOptions: ComponentRenderOptions) => ComponentBlock)) => {\n    let componentStore: unknown[] = [];\n    let componentStoreBindings: (() => void)[][] = [];\n    let componentArgStore: { [key: string]: ComponentVariable<any> } = {};\n    let componentRenderer: (renderOptions: ComponentRenderOptions) => ComponentBlock;\n    let componentStoreCycleIndex = 0;\n    let componentRenderCycleIndex = 0;\n\n    const componentOptions: Partial<ComponentOptions> = {};\n\n    const localisedUpdateTrigger = () => {\n        componentRenderCycleIndex++;\n        const funcReturn = componentRenderer({\n            render: (component: TemplateStringsArray, ...args: unknown[]) => createHTML(componentStore, componentStoreBindings, component, ...args),\n            _if: (condition, render) => {\n                return {\n                    items: [],\n                    eval: condition,\n                    evalRender: render,\n                    evalType: 'if'\n                }\n            },\n            _for: (condition, render) => {\n                return {\n                    items: [],\n                    eval: condition,\n                    evalRender: render as any,\n                    evalType: 'for'\n                }\n            },\n            _class: (classes) => {\n                const classListeners = componentOptions.use!(() => {\n                    return Object.values(classes).map((x) => typeof x === 'object' ?  x.get() : x).map((x, i) => x ? Object.keys(classes)[i] : '').filter(Boolean).join(' ').trim();\n                }, []);\n\n                return {\n                    items: Array.from(Object.values(classes)) as any,\n                    eval: classListeners,\n                    evalType: 'class'\n                }\n            },\n            _bind: (value) => {\n                return {\n                    items: [],\n                    eval: value,\n                    evalType: 'bind'\n                }\n            },\n            _echo: (variable) => {\n                return {\n                    items: [variable] as any,\n                    eval: variable,\n                    evalType: 'echo'\n                }\n            }\n        });\n\n        componentOptions.element!.appendChild(funcReturn.items[0]!);\n        if (componentOptions.on?.create) componentOptions.on.create();\n    }\n    \n    componentOptions.on = {} as any;\n    componentOptions.use = (val, deps = []) => {\n        const index = ++componentStoreCycleIndex;\n        if (index > componentStore.length) {\n            componentStore.push(getVarOrPrimitive(val));\n            componentStoreBindings.push([]);\n        };\n\n        deps.forEach((dep) => {\n            componentStoreBindings[dep.id].push(() => {\n                componentStoreBindings[index - 1].forEach((binding) => binding());\n            });\n        });\n\n        return {\n            id: index - 1,\n            get: () => getVar(componentStore[index - 1]),\n            set: (value) => {\n                const newValue = typeof value === 'function' ? (value as any)(componentStore[index - 1] as typeof val) : value;\n                const oldValue = componentStore[index - 1];\n                if (newValue != oldValue) {\n                    componentStore[index - 1] = newValue;\n                    componentStoreBindings[index - 1].forEach((binding) => binding());\n                }\n            },\n        } as ComponentVariable<typeof val>\n    };\n    componentOptions.arg = (key, {transformer, initial}) => {\n        const attrValue = root.host.getAttribute(key) ? root.host.getAttribute(key) : root.host.hasAttribute(key) ? true : initial;\n        if (!componentArgStore[key]) componentArgStore[key] = componentOptions.use!(attrValue);\n        const keyedVariable = componentArgStore[key];\n        return {\n            id: keyedVariable.id,\n            get: (...args) => transformer ? transformer(getVar(componentStore[keyedVariable.id], ...args)) : getVar(componentStore[keyedVariable.id], ...args),\n            set: keyedVariable.set\n        }  as ComponentVariable<any>\n    };\n    componentOptions.store = (key, {transformer, initial}) => {\n        if (!globalStore[key]) globalStore[key] = {\n            value: initial,\n            bindings: []\n        };\n        const keyedVariable = componentOptions.use!(globalStore[key].value);\n        const updater = (value: any) => keyedVariable.set(value);\n        globalStore[key].bindings.push(updater);\n\n        componentStoreBindings[keyedVariable.id].push(() => {\n            const value = keyedVariable.get();\n            globalStore[key].bindings.filter((x) => x !== updater).forEach((binding) => binding(value));\n        });\n\n        return {\n            id: keyedVariable.id,\n            get: (...args) => transformer ? transformer(getVar(componentStore[keyedVariable.id], ...args)) : getVar(componentStore[keyedVariable.id], ...args),\n            set: keyedVariable.set\n        }  as ComponentVariable<any>\n    };\n    componentOptions.action = (callback) => {\n        return {\n            id: 0,\n            get: () => callback\n        }  as ComponentVariable<any>\n    };\n\n    componentOptions.rootElement = root.host as HTMLElement;\n    componentOptions.element = root;\n\n    componentRenderer = func({ $: componentOptions as ComponentOptions });\n    localisedUpdateTrigger();\n    return { componentArgStore, componentStore, componentStoreBindings }\n}", "{\n  \"name\": \"smol-lib\",\n  \"version\": \"1.0.4\",\n  \"description\": \"\",\n  \"src\": \"src/index.ts\",\n  \"types\": \"lib/index.d.ts\",\n  \"main\": \"lib/index.js\",\n  \"scripts\": {\n    \"dev\": \"tsc --watch\",\n    \"build\": \"node ./build.mjs\",\n    \"build:docs\": \"yarn build && node ./example/build.mjs\"\n  },\n  \"files\": [\n    \"lib\"\n  ],\n  \"keywords\": [],\n  \"author\": \"Haydn Comley <haydn.comley@clearscore.com>\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"esbuild\": \"0.19.2\",\n    \"tsx\": \"^3.12.3\",\n    \"typescript\": \"^4.9.5\"\n  }\n}\n", "import { createComponent } from \"./lib/core.lib.js\";\nimport { version } from \"../package.json\";\n\nif (typeof window !== 'undefined') {\n    (window as any).smol = {\n        createComponent,\n        version\n    }\n};\n\nexport {\n    createComponent\n}"],
  "mappings": "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",
  "names": ["isVar", "value", "isBlock", "getVar", "val", "args", "getVarOrPrimitive", "getAttributeBindings", "attr", "regex", "m", "classes", "match", "groupIndex", "globalStore", "createCommentMarker", "id", "item", "context", "type", "isVar", "isBlock", "value", "getVarOrPrimitive", "tempName", "getAllCommentMarkers", "root", "treeWalker", "node", "currentNode", "nodeList", "createHTML", "store", "bindings", "component", "args", "argsLength", "attributeBindingsKeys", "attributeBindings", "transformed", "prev", "curr", "i", "getAttributeBindings", "wrapped", "totalItems", "itemID", "items", "totalParentId", "regex", "split", "getVal", "val", "text", "block", "doEval", "getVar", "element", "baseItem", "itemsArray", "newItems", "_", "attrBindCount", "attr", "index", "currentBinding", "name", "targetElement", "bindingValue", "r", "createComponent", "tag", "func", "settings", "styles", "componentArgStore", "componentStoreBindings", "createComponentLogic", "key", "callback", "componentStore", "componentRenderer", "componentStoreCycleIndex", "componentRenderCycleIndex", "componentOptions", "localisedUpdateTrigger", "funcReturn", "condition", "render", "classes", "classListeners", "x", "variable", "deps", "dep", "binding", "newValue", "oldValue", "transformer", "initial", "attrValue", "keyedVariable", "updater", "version", "createComponent", "version"]
}
